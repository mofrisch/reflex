// /Users/mo/Development/cc/reflex/out/build/clang/lex.yy.cpp generated by reflex 4.5.0 from /Users/mo/Development/cc/reflex/wcpp.l

#define REFLEX_VERSION "4.5.0"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_flex                true
#define REFLEX_OPTION_lex                 yylex
#define REFLEX_OPTION_lexer               yyFlexLexer
#define REFLEX_OPTION_main                true
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "/Users/mo/Development/cc/reflex/out/build/clang/lex.yy.cpp"
#define REFLEX_OPTION_prefix              yy

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE DEFINITIONS                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define INITIAL (0)
#define YY_NUM_RULES (4)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE ABSTRACT LEXER CLASS                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/flexlexer.h>
typedef reflex::FlexLexer<reflex::Matcher> FlexLexer;

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class yyFlexLexer : public FlexLexer {
#line 13 "/Users/mo/Development/cc/reflex/wcpp.l"

  int ch, wd, nl;

 public:
  yyFlexLexer(
      // a persistent source of input, empty by default
      const reflex::Input& input = reflex::Input(),
      // optional output stream, NULL means std::cout by default
      std::ostream *os = NULL)
    :
      FlexLexer(input, os)
  {
#line 18 "/Users/mo/Development/cc/reflex/wcpp.l"

  ch = wd = nl = 0;

  }
  // the flex lexer function defined by SECTION 2
  virtual int yylex(void);
  // lexer functions accepting new input to scan
  int yylex(const reflex::Input& input)
  {
    in(input);
    return yylex();
  }
  int yylex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return yylex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "/Users/mo/Development/cc/reflex/wcpp.l"
// simple unix-like wc (word count) with lexer class data members

#line 5 "/Users/mo/Development/cc/reflex/wcpp.l"

  #include <cstdio>
  #include <iostream>
  #include <iomanip>
  using namespace std;

#line 12 "/Users/mo/Development/cc/reflex/wcpp.l"
// Lexer class members
#line 17 "/Users/mo/Development/cc/reflex/wcpp.l"
// Lexer class initialization at construction

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int yyFlexLexer::yylex(void)
{
  static const char *REGEX_INITIAL = "(?m)((?:\\r?\\n))|((?:[^\\x09\\x0a\\x0d\\x20])+)|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    YY_USER_INIT
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
#line 33 "/Users/mo/Development/cc/reflex/wcpp.l"
*yyout << setw(8) << nl << setw(8) << wd << setw(8) << ch << endl; yyterminate();

            }
            else
            {
              output(matcher().input());
            }
            YY_BREAK
          case 1: // rule /Users/mo/Development/cc/reflex/wcpp.l:30: {nl} :
            YY_USER_ACTION
#line 30 "/Users/mo/Development/cc/reflex/wcpp.l"
ch += yyleng; ++nl;
            YY_BREAK
          case 2: // rule /Users/mo/Development/cc/reflex/wcpp.l:31: {wd}+ :
            YY_USER_ACTION
#line 31 "/Users/mo/Development/cc/reflex/wcpp.l"
ch += yyleng; ++wd;
            YY_BREAK
          case 3: // rule /Users/mo/Development/cc/reflex/wcpp.l:32: . :
            YY_USER_ACTION
#line 32 "/Users/mo/Development/cc/reflex/wcpp.l"
++ch;
            YY_BREAK
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: main                                                           //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int main()
{
  return yyFlexLexer().yylex();
}
